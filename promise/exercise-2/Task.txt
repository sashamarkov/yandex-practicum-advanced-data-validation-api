В этом тренажёре вам нужно реализовать асинхронные вычисления простых чисел. Это довольно трудоёмкая задача и пока она реализована в синхронном коде функции runComputation(start, stop), подсчитывающей количество простых чисел в диапазоне от start до stop.
Создайте функцию runComputationAsync(), изменив существующую функцию и вызывающий её код runFrameWatch() таким образом, чтобы избавиться от синхронных вычислений, замедляющих работу браузера - для этого следите за счётчиком кадров в секунду. Примените промисы и готовую функцию getCalcData(), она возвращает набор чисел от start до stop в промисе.
Дополнительно постарайтесь избавиться от повторного вычисления глобальных переменных lastNum и primeCount, пусть их значение возвращает функция runComputationAsync().

---
Для поиска простых чисел в списке используйте .filter
Используйте цепочки .then для последовательной обработки данных
Не присваивайте глобальные переменные внутри промисов
Проверьте, как влияет на FPS значение переменной step


---
import { getCalcData, isPrime } from "./data.js";

const fpsElement = document.querySelector(".fps-panel")
const containerElement = document.querySelector('.container')

let lastDate;
let lastFps;

function showFpsAndCount(count) {
    if(!lastDate){
        lastDate = Date.now();
    }
    let thisDate = Date.now();
    let dt = Math.max(1, thisDate - lastDate);
    let thisFps = 1000 / dt;
    if(!lastFps || Math.abs(thisFps - lastFps) >= 1){
        lastFps = thisFps;
        fpsElement.textContent = `Primes count: ${count}; ${Math.round(lastFps)} FPS`
    }
    lastDate = thisDate;
}

function runComputation(start, stop){
    let count = 0;
    for(let n = start; n < stop; n++){
        if(isPrime(n)){
            count++
        }
    }
    return count;
}

function runComputationAsync(start, stop, primeCount){
    return get...
        .then(numbers => ...
        .then(primes => ...
}

let primeCount = 0;
let lastNum = 0;
let step = 500_000;

function runFrameWatcher(){
    primeCount += runComputation(lastNum, lastNum + step); // заменить на вызов runComputationAsync
    lastNum += step; // обработать в then
    showFpsAndCount(primeCount); //обработать в then
    setTimeout(() => runFrameWatcher(), 1000 / 60) //обработать в then
}

document.addEventListener('DOMContentLoaded', () => {
    runFrameWatcher()
})