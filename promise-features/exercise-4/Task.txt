–í–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫–∞–∑–∞, –µ–≥–æ –∑–∞–∫–∞–∑ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫—É—Ö–Ω—é, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –Ω–∞–∫–æ–Ω–µ—Ü, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π –∑–∞–∫–∞–∑.
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—á–µ—Ä–µ–¥—å, —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ checkList() —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é. –ù–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è Promise.any, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫–∞–∑ –∏–∑ –ª—é–±–æ–π –æ—á–µ—Ä–µ–¥–∏.
–¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤ –≤—Å—ë –≤—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω—è–ª–∞—Å—å, –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–∫–Ω—É –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è (10 —Å–µ–∫—É–Ω–¥), –µ—Å–ª–∏ –∫–∞—Å—Å–∞ –æ–ø—É—Å—Ç–µ–ª–∞. –ó–¥–µ—Å—å –≤–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è Promise.race –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤.

---
–¢–∞–π–º–µ—Ä—ã –æ—Ç–º–µ–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
–ù–µ –ø–µ—Ä–µ–ø—É—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è .any –∏–ª–∏ .race

---
index.js
const orderLine = document.querySelector(".order")
const cookLine = document.querySelector(".cook")
const deliveryLine = document.querySelector(".delivery")
const eatLine = document.querySelector(".eat")

const food = ['üçï','üçî','üçü','üå≠','ü•™','üåÆ','üçñ','üçó','ü•©','üç©','ü•õ','ü•§','‚òï']

let orderList = []
let cookList = []
let deliveryList = []
let eatList = []

let orderId = 0;

function addOrder() {
    let nextFood = food[Math.round((food.length - 1) * Math.random())]
    let nextOrderId = ++orderId;
    let readyAfter = Math.round(Date.now() + (5000 * Math.random()))
    orderList.push({food: nextFood, orderId: nextOrderId, readyAfter})
}

function drawLines() {
    let lines = [
        [orderLine, orderList], 
        [cookLine, cookList], 
        [deliveryLine, deliveryList], 
        [eatLine, eatList]
    ]
    lines.forEach(([line, list]) => {
        line.textContent = list.map(it => it.food).join(" ")
    })
    requestAnimationFrame(() => drawLines())
}

document.addEventListener("DOMContentLoaded", () => {
    document.querySelector(".order-line").addEventListener('click', () => addOrder())

    let checkList = (list, nextList) => new Promise((resolve, reject) => {
        let now = Date.now();
        let orderReady = list.find(order => order.readyAfter <= now)
        if(orderReady){
            ???([orderReady, list, nextList]) //–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–º–∏—Å —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        } else {
            ??? //–ø—Ä–æ–º–∏—Å –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
        }
    })

    let checkLists = () => {
        Promise.???([ //–Ω—É–∂–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –ª—é–±–æ–π –æ—á–µ—Ä–µ–¥–∏
            checkList(orderList, cookList),
            checkList(cookList, deliveryList),
            checkList(deliveryList, eatList),
            checkList(eatList)
        ]).then(([order, list, nextList]) => {
            if(order){
                let orderPos = list.findIndex(it => it.orderId == order.orderId)
                list.splice(orderPos, 1)
                if(nextList){
                    nextList.push(order)
                    order.readyAfter = Date.now() + (5000 * Math.random())
                }
            }
            setTimeout(() => checkLists(), 333)
        }).catch(() => setTimeout(() => checkLists(), 666))
    }

    let checkOrders = () => {
        let alertTimer
        let checkTimer
        //–∑–¥–µ—Å—å —Ç–∞–π–º–µ—Ä—ã —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, –µ—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ –æ–¥–∏–Ω –∏–∑ —Ç–∞–π–º–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω—è–µ—Ç –¥—Ä—É–≥–æ–π
        let alertPromise = new Promise((resolve) => {
            alertTimer = setTimeout(() => {
                alert("–°–≤–æ–±–æ–¥–Ω–∞—è –∫–∞—Å—Å–∞!")
                clearTimeout(checkTimer)
                resolve()
            }, 10 * 1000)
        })
        let checkPromise = new Promise((resolve) => {
            let checkFn = () => {
                if(orderList.length > 0){
                    clearTimeout(alertTimer)
                    resolve()
                } else {
                    checkTimer = setTimeout(() => checkFn(), 500)
                }
            }
            checkFn()
        })
        Promise.???([alertPromise, checkPromise]).then(() => setTimeout(() => checkOrders(), 1000)) //–Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å
    }

    checkOrders()
    checkLists()
    drawLines()
})